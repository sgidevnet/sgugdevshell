#!/bin/ksh

# we could source a toolchain-supplied defaults file here
#
# possibly even source a whole dir full of stuff so that
# package-specific additions would get pulled in?
#
# these values are just what happens to work on the box
# I'm writing this thing on. change to what you have.

# This will be re-used later down the script to best-guess
# at which shell the user actually wants
ORIG_SHELL=$SHELL

# Unset a bunch of things we don't want to "leak"
# They may get set later down the script, but lets be explicit
# about what needs clearing
# 1) Base tools/paths to them
unset SHELL
unset CONFIG_SHELL
unset SHELL_PATH
unset PERL
unset M4
unset AWK
unset SED
unset GREP
unset BISON
unset YACC
unset AS
unset LD
unset CC
unset CXX
# 2) Compiler vars
unset CPPFLAGS
unset CFLAGS
unset CXXFLAGS
unset LDFLAGS
# 3) Discovery things
unset LD_LIBRARY_PATH
unset LD_LIBRARYN32_PATH
unset LD_LIBRARYN64_PATH
unset PKG_CONFIG_PATH

BIN_PATH=/opt/local/bin
BINUTILS_PATH=/opt/local/binutils-2.21.1/bin
GCC_PATH=/opt/local/gcc-8.2.0/bin
N32_LIB_PATH=/opt/local/lib
INCLUDE_PATH=/opt/local/include
CFLAGS=''
LDFLAGS=''

# TODO: usage

while getopts g:l:i:b:B: i
do
    case $i in
	g) echo 'NOTE: Overriding GCC path with '$2; GCC_PATH=$2;;
	l) echo 'NOTE: Overriding N32 library path with '$2; N32_LIB_PATH=$2:${N32_LIB_PATH};;
	i) echo 'NOTE: Overriding include path with '$2; INCLUDE_PATH=$2:${INCLUDE_PATH};;
	b) echo 'NOTE: Overriding general binary path with '$2; BIN_PATH=$2;;
	B) echo 'NOTE: Overriding binutils path with '$2; BINUTILS_PATH=$2;;
    esac
done
	
export PATH=$GCC_PATH:$BINUTILS_PATH:$BIN_PATH:$PATH
export LD_LIBRARYN32_PATH=$N32_LIB_PATH:$LD_LIBRARYN32_PATH

IFS=':'

set -A incs $INCLUDE_PATH
for i in ${incs[@]}
do
    CFLAGS="-I${i} "$CFLAGS
done

set -A n32libs $N32_LIB_PATH
for i in ${libs[@]}
do
    # do this to make sure all built executables are usable
    # without setting LD_LIBRARYN32_PATH separately.
    LDFLAGS="-L${i} -Wl,-rpath=${i} "$LDFLAGS
    # TODO: handle a case with empty LD_LIBRARYN32_PATH
    # and only one passed element to avoid the empty entry
    LD_LIBRARYN32_PATH=${i}:$LD_LIBRARYN32_PATH
done

echo
echo 'Your development environment setup for this session:'
echo
echo 'PATH                  = '$PATH
echo 'CFLAGS                = '$CFLAGS
echo 'CXXFLAGS              = '$CFLAGS
echo 'LDFLAGS               = '$LDFLAGS
echo 'LD_LIBRARYN32_PATH    = '$LD_LIBRARYN32_PATH

echo 
echo 'Good luck!'

export CFLAGS
export LDFLAGS
export PATH
export LD_LIBRARYN32_PATH

# TODO: figure out login shell and act accordingly.
#
# with bash we can set --rcfile to something. for example,
# if we wanted to "inject" stuff directly (such as a precmd
# function, for example), we could make a temporary file
# which would do all that and in the end source ~/.sgug_bashrc
# and delete itself to avoid filling up /tmp with cruft.
#
# the idea of .sgug_bashrc would be to serve as an init file for
# stuff like prompting, completion etc. the user could set up the
# shell init so that his .bashrc sets his normal PATH and friends
# and sources .sgug_bashrc in the end for the rest.
#
# just an idea - discuss!

exec /opt/local/bin/bash --norc

